1.在提供的功能中提供了大量的用户可输入文本的操作项，可能会操作xxs攻击（js注入）
	xxs攻击是用户提交的内容中右js代码，而在取出该内容在页面显示时，该代码片段会执行，从而使用户的信息泄漏或服务器被攻击（拿到用户的sessionID来伪造登录）
	解决：
	1.使用ESAPI处理sql注入和xss攻击
		ESAPI.encoder().encodeForHTML(message.getTitle())
	
2.增加敏感词汇过滤	

3.对动态的内容做缓存加动态读取

4.返回插入的id
	<insert id="insertLongMessageContent" parameterType="com.cfyj.weilan.entity.LongMessageContent" >
		insert into tb_longMessageContent(content,userId) values(#{content},#{userId})
		<selectKey keyProperty="id" order="AFTER" resultType="Integer">
			SELECT LAST_INSERT_ID() AS id
		</selectKey> 
	</insert>
	根据记录最后的插入时间返回最后一条记录的id， 但是这个会遇到一个问题，当高并发的场景下，比如用户1插入数据，用户2这时候也插入数据，返回的id可能是用户2的id。
	

5.Java连接Mysql数据库警告：Establishing SSL connection without server's identity verification is not recommend
原因是MySQL在高版本需要指明是否进行SSL连接。解决方案如下：
在mysql连接字符串url中加入ssl=true或者false即可，如下所示。
url=jdbc:mysql://127.0.0.1:3306/framework?characterEncoding=utf8&useSSL=true

12.08
1.遇到esapi.properties文件找不到，需要从esapi的源码中解压出这个文件，然后把这个文件放到配置下。（使用esapi来防止xxs攻击）
2.关于mysql时间戳的定义:{
	`createTime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    `modifytime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP on update current_timestamp, 默认为当前时间，修改时刷新时间
}




